1.Write a generic method to count the number of elements in a collection that have a specific property
(for example, odd integers, prime numbers, palindromes).

public interface Testable<T>{
    public boolean test(T o);
}

public class TestOdd implements Testable<Integer> {
    public boolean test(Integer i) {
        return i % 2 != 0;
    }
}
public static <T> Integer countOdd(Collection<T> colOfItems, Testable<T> t){
    Integer cnt = 0;
    for (T entry : colOfItems){
        if(t.test(entry))
            cnt++;
    }
    return cnt;
}

public static void main(String[] args) {
    Collection<Integer> c1 = Arrays.asList(1,3,4,5,6);
    System.out.println("Odd numbers are "+ countOdd(c1, new TestOdd()));

}


2. Will the following class compile? If not, why?
   public final class Algorithm {
       public static <T> T max(T x, T y) {
           return x > y ? x : y;
       }
   }

   the program will not compile because there is comparison between types - only
   available for primitives

3. Write a generic method to exchange the positions of two different elements in an array.
  public static <T> void exchangePosition(T[] array, Integer p1, Integer p2){
        T tempEl = array[p1];
        array[p1] = array[p2];
        array[p2] = tempEl;
    }


4.If the compiler erases all type parameters at compile time, why should you use generics?
To make code cleaner and maintain stability between different versions of code.
To keep runtime overhead generated by non generic code in normal levels.

5.   What is the following class converted to after type erasure?
     public class Pair<K, V> {

         public Pair(K(object) key, V(object) value) {
             this.key = key;
             this.value = value;
         }

         public K(Object) getKey(); { return key; }
         public V(Object) getValue(); { return value; }

         public void setKey(K(Object) key)     { this.key = key; }
         public void setValue(V(Object) value) { this.value = value; }

         private K(Object) key;
         private V(Object) value;
     }

6. What is the following method converted to after type erasure?
    public static <T extends Comparable<T>>
        int findFirstGreaterThan(T[] at, T elem) {
        // ...
    }

    public static int findFirstGreaterThan(Comparable[] at, Comparable elem) {
            // ...
        }

7. Will the following method compile? If not, why?
        public static void print(List<? extends Number> list) {
            for (Number n : list)
                System.out.print(n + " ");
            System.out.println();
        }

        The types supported are Number or it's subclasses(integer, etc).
        Compiles normal

8. Write a generic method to find the maximal element in the range [begin, end) of a list.
    public static <T extends Comparable<T>> T findMaxEl(List<T> list, Integer begin, Integer end ){
        T maxEl = list.get(begin);
        for(int i = begin + 1; i < end; i++){
                if (list.get(i).compareTo(maxEl) > 0 )
                    maxEl = list.get(i);
            }
        return maxEl;
    }

9. Will the following class compile? If not, why? - no
public class Singleton<T> {

    public static T getInstance() {
        if (instance == null)
            instance = new Singleton<T>(); // Cant create instance of the singleton !

        return instance;
    }

    private static T instance = null;
} s

10.  Compiles ? No - different classes

11. Compiles error free

12. How do you invoke the following method to find the first integer in a list that is relatively prime to a list of specified integers?
    public static <T>
        int findFirst(List<T> list, int begin, int end, UnaryPredicate<T> p)
    Note that two integers a and b are relatively prime if gcd(a, b) = 1, where gcd is short for greatest common divisor.

    1. create class which extends UnaryPredicate and implements the GCD function
    2. Call the method with the agruments : list, b,e, class from 1.

